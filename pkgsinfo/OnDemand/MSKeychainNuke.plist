<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>OnDemand</key>
	<true/>
	<key>autoremove</key>
	<false/>
	<key>catalogs</key>
	<array>
		<string>production</string>
	</array>
	<key>category</key>
	<string>Self-Service</string>
	<key>description</key>
	<string>Purges Microsoft authentication keychain entries.  Helps if Outlook/Office is constantly prompting for authentication.</string>
	<key>developer</key>
	<string>TR</string>
	<key>display_name</key>
	<string>Microsoft Authentication Fix</string>
	<key>installer_type</key>
	<string>nopkg</string>
	<key>minimum_os_version</key>
	<string>10.10.0</string>
	<key>name</key>
	<string>MSKeychainNuke</string>
	<key>postinstall_script</key>
	<string>#!/bin/sh
#set -x

TOOL_NAME="Microsoft Office 2016 Keychain Removal Tool"
TOOL_VERSION="1.0"

## Copyright (c) 2016 Microsoft Corp. All rights reserved.
## Scripts are not supported under any Microsoft standard support program or service. The scripts are provided AS IS without warranty of any kind.
## Microsoft disclaims all implied warranties including, without limitation, any implied warranties of merchantability or of fitness for a 
## particular purpose. The entire risk arising out of the use or performance of the scripts and documentation remains with you. In no event shall
## Microsoft, its authors, or anyone else involved in the creation, production, or delivery of the scripts be liable for any damages whatsoever 
## (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or other pecuniary 
## loss) arising out of the use of or inability to use the sample scripts or documentation, even if Microsoft has been advised of the possibility
## of such damages.
## Feedback: pbowden@microsoft.com

# Constants
WORD2016PATH="/Applications/Microsoft Word.app"
EXCEL2016PATH="/Applications/Microsoft Excel.app"
POWERPOINT2016PATH="/Applications/Microsoft PowerPoint.app"
OUTLOOK2016PATH="/Applications/Microsoft Outlook.app"
ONENOTE2016PATH="/Applications/Microsoft OneNote.app"
SCRIPTPATH=$( cd $(dirname $0) ; pwd -P )
CURRENT_USER=`stat -f "%Su" /dev/console`
KEYCHAIN_PATH="/Users/$CURRENT_USER/Library/Keychains/login.keychain"

function ShowUsage {
# Shows tool usage and parameters
	echo $TOOL_NAME - $TOOL_VERSION
	echo "Purpose: Removes Office 2016 for Mac keychain entries"
	echo "Usage: NukeOffKey [--All] [--Force]"
	echo
	exit 0
}

# Check that all keychain-integrated applications are not running
function CheckRunning {
	OPENAPPS=0
	WORDRUNSTATE=$(CheckLaunchState "$WORD2016PATH")
	if [ "$WORDRUNSTATE" == "1" ]; then
		OPENAPPS=$(($OPENAPPS + 1))
	fi
	EXCELRUNSTATE=$(CheckLaunchState "$EXCEL2016PATH")
	if [ "$EXCELRUNSTATE" == "1" ]; then
		OPENAPPS=$(($OPENAPPS + 1))
	fi
	POWERPOINTRUNSTATE=$(CheckLaunchState "$POWERPOINT2016PATH")
	if [ "$POWERPOINTRUNSTATE" == "1" ]; then
		OPENAPPS=$(($OPENAPPS + 1))
	fi
	OUTLOOKRUNSTATE=$(CheckLaunchState "$OUTLOOK2016PATH")
	if [ "$OUTLOOKRUNSTATE" == "1" ]; then
		OPENAPPS=$(($OPENAPPS + 1))
	fi
	ONENOTERUNSTATE=$(CheckLaunchState "$ONENOTE2016PATH")
	if [ "$ONENOTERUNSTATE" == "1" ]; then
		OPENAPPS=$(($OPENAPPS + 1))
	fi
	if [ "$OPENAPPS" != "0" ]; then
		echo "1"
	else
		echo "0"
	fi
}

# Checks to see if a process is running
function CheckLaunchState {
	APPPATH="$1"
	local RUNNING_RESULT=$(ps ax | grep -v grep | grep "$APPPATH")
	if [ "${#RUNNING_RESULT}" -gt 0 ]; then
		echo "1"
	else
		echo "0"
	fi
}

# Forcibly terminates a process
function ForceTerminate {
	PROCESS="$1"
	$(ps ax | grep -v grep | grep "$PROCESS" | awk '{print $1}' | xargs kill -9 2&gt; /dev/null 1&gt; /dev/null)
}

# Forcibly quits all Office 2016 apps
function ForceQuit2016 {
	ForceTerminate "$WORD2016PATH"
	ForceTerminate "$EXCEL2016PATH"
	ForceTerminate "$POWERPOINT2016PATH"
	ForceTerminate "$OUTLOOK2016PATH"
	ForceTerminate "$ONENOTE2016PATH"
}

# Checks to see if 'msoCredentialSchemeADAL' entries are present in the keychain
function FindEntryMsoCredentialSchemeADAL {
	sudo -u "$CURRENT_USER" /usr/bin/security find-internet-password -s 'msoCredentialSchemeADAL' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Removes the first 'msoCredentialSchemeADAL' entry from the keychain
function RemoveEntryMsoCredentialSchemeADAL {
	sudo -u "$CURRENT_USER" /usr/bin/security delete-internet-password -s 'msoCredentialSchemeADAL' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Checks to see if 'MSOpenTech.ADAL.1*' entries are present in the keychain
function FindEntryMSOpenTechADAL1 {
	sudo -u "$CURRENT_USER" /usr/bin/security find-generic-password -G 'MSOpenTech.ADAL.1' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Removes the first 'MSOpenTech.ADAL.1*' entry from the keychain
function RemoveEntryMSOpenTechADAL1 {
	sudo -u "$CURRENT_USER" /usr/bin/security delete-generic-password -G 'MSOpenTech.ADAL.1' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Checks to see if the 'Microsoft Office Identities Cache 2' entry is present in the keychain
function FindEntryOfficeIdCache2 {
	sudo -u "$CURRENT_USER" /usr/bin/security find-generic-password -l 'Microsoft Office Identities Cache 2' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Removes the 'Microsoft Office Identities Cache 2' entry from the keychain
function RemoveEntryOfficeIdCache2 {
	sudo -u "$CURRENT_USER" /usr/bin/security delete-generic-password -l 'Microsoft Office Identities Cache 2' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Checks to see if the 'Microsoft Office Identities Settings 2' entry is present in the keychain
function FindEntryOfficeIdSettings2 {
	sudo -u "$CURRENT_USER" /usr/bin/security find-generic-password -l 'Microsoft Office Identities Settings 2' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

# Removes the 'Microsoft Office Identities Settings 2' entry from the keychain
function RemoveEntryOfficeIdSettings2 {
	sudo -u "$CURRENT_USER" /usr/bin/security delete-generic-password -l 'Microsoft Office Identities Settings 2' "$KEYCHAIN_PATH" 2&gt; /dev/null 1&gt; /dev/null
	echo $?
}

REMOVEALL=true

## Main
# Start Removal Routine
if [ $REMOVEALL ]; then
	if [ -z "$CURRENT_USER" ] || [ "$CURRENT_USER" == "root" ]; then
			echo "ERROR: Running as root or no other user logged in."
			echo
			exit 1
	fi
	
	APPSRUNNING=$(CheckRunning)
	if [ "$APPSRUNNING" == "1" ]; then
		if [ $FORCE ]; then
			ForceQuit2016
		else
			echo "ERROR: Office 2016 apps are open. Either close the apps, or use the '--Force' option."
			echo
			exit 1
		fi
	fi
	
	# Find and remove 'msoCredentialSchemeADAL' entries
	MAXCOUNT=0
	KEYNOTPRESENT=$(FindEntryMsoCredentialSchemeADAL)
	while [ "$KEYNOTPRESENT" == "0" ] || [ $MAXCOUNT -gt 20 ]; do
		RemoveEntryMsoCredentialSchemeADAL
		let MAXCOUNT=MAXCOUNT+1
		KEYNOTPRESENT=$(FindEntryMsoCredentialSchemeADAL)
	done
	
	# Find and remove 'MSOpenTech.ADAL.1*' entries
	MAXCOUNT=0
	KEYNOTPRESENT=$(FindEntryMSOpenTechADAL1)
	while [ "$KEYNOTPRESENT" == "0" ] || [ $MAXCOUNT -gt 20 ]; do
		RemoveEntryMSOpenTechADAL1
		let MAXCOUNT=MAXCOUNT+1
		KEYNOTPRESENT=$(FindEntryMSOpenTechADAL1)
	done
	
	# Find and remove 'Microsoft Office Identities Cache 2' entries
	MAXCOUNT=0
	KEYNOTPRESENT=$(FindEntryOfficeIdCache2)
	while [ "$KEYNOTPRESENT" == "0" ] || [ $MAXCOUNT -gt 20 ]; do
		RemoveEntryOfficeIdCache2
		let MAXCOUNT=MAXCOUNT+1
		KEYNOTPRESENT=$(FindEntryOfficeIdCache2)
	done
	
	# Find and remove 'Microsoft Office Identities Settings 2' entries
	MAXCOUNT=0
	KEYNOTPRESENT=$(FindEntryOfficeIdSettings2)
	while [ "$KEYNOTPRESENT" == "0" ] || [ $MAXCOUNT -gt 20 ]; do
		RemoveEntryOfficeIdSettings2
		let MAXCOUNT=MAXCOUNT+1
		KEYNOTPRESENT=$(FindEntryOfficeIdSettings2)
	done
	
	echo "All Microsoft Office 2016 keychain entries removed."
	echo
	exit 0
fi

exit 0
</string>
	<key>blocking_applications</key>
	<array>
		<string>Microsoft Word</string>
		<string>Microsoft PowerPoint</string>
		<string>Microsoft Excel</string>
		<string>Microsoft Outlook</string>
		<string>Microsoft OneNote</string>
	</array>
	<key>version</key>
	<string>1.0</string>
</dict>
</plist>